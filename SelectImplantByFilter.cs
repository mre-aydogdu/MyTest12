///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace RX_coDiagnostiX_Library.DiagnostiXModul.Implant
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The SelectImplantByFilter recording.
    /// </summary>
    [TestModule("5d3ca452-855e-4b50-b332-cc23e697e6fc", ModuleType.Recording, 1)]
    public partial class SelectImplantByFilter : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::RX_coDiagnostiX_Library.RX_coDiagnostiXRepository repository.
        /// </summary>
        public static global::RX_coDiagnostiX_Library.RX_coDiagnostiXRepository repo = global::RX_coDiagnostiX_Library.RX_coDiagnostiXRepository.Instance;

        static SelectImplantByFilter instance = new SelectImplantByFilter();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public SelectImplantByFilter()
        {
            ImplantFilterText = "033.572S";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static SelectImplantByFilter Instance
        {
            get { return instance; }
        }

#region Variables

        string _ImplantFilterText;

        /// <summary>
        /// Gets or sets the value of variable ImplantFilterText.
        /// </summary>
        [TestVariable("02309b9e-fcfe-422b-b7e3-f67ce78fd26d")]
        public string ImplantFilterText
        {
            get { return _ImplantFilterText; }
            set { _ImplantFilterText = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 20s to exist. Associated repository item: 'Forms.ChooseImplant'", repo.Forms.ChooseImplant.SelfInfo, new ActionTimeout(20000), new RecordItemIndex(0));
            repo.Forms.ChooseImplant.SelfInfo.WaitForExists(20000);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Forms.ChooseImplant.EditSearch' at 58;13.", repo.Forms.ChooseImplant.EditSearchInfo, new RecordItemIndex(2));
            repo.Forms.ChooseImplant.EditSearch.Click("58;13");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to '$ImplantFilterText' on item 'Forms.ChooseImplant.EditSearch'.", repo.Forms.ChooseImplant.EditSearchInfo, new RecordItemIndex(3));
            repo.Forms.ChooseImplant.EditSearch.Element.SetAttributeValue("Text", ImplantFilterText);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(4));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Forms.ChooseImplant.VisibleImplantElement' at 135;75.", repo.Forms.ChooseImplant.VisibleImplantElementInfo, new RecordItemIndex(5));
            repo.Forms.ChooseImplant.VisibleImplantElement.Click("135;75");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(6));
            Delay.Duration(500, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
